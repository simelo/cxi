<      {
}
/(\r\n|\r|\n)/ {
	lval.line++
	LineNo++
	token := f(NEWLINE)
	if token != NEWLINE {
		return token
	}
}
/(\t| )/ {
	/* skip blanks and tabs */
}
/(\/\*([^*]|[\r\n]|(\*+([^*\/]|[\r\n])))*\*+\/)|\/\/[^\n\r]*/ {
	/* skip comments */
	noLines := countNewLines([]byte(yylex.Text()))
	lval.line += noLines
        LineNo += noLines
}
/aff/                     { lval.tok = yylex.Text(); return f(AFF) }
/bool/                    { lval.tok = yylex.Text(); return f(BOOL) }
/byte/                    { lval.tok = yylex.Text(); return f(BYTE) }
/break/                   { return f(BREAK) }
/case/                    { return f(CASE) }
/const/                   { return f(CONST) }
/continue/                { return f(CONTINUE) }
/default/                 { return f(DEFAULT) }
/else/                    { return f(ELSE) }
/enum/                    { return f(ENUM) }
/f32/                     { lval.tok = yylex.Text(); return f(F32) }
/f64/                     { lval.tok = yylex.Text(); return f(F64) }
/for/                     { return f(FOR)}
/goto/                    { return f(GOTO)}
/i8/                      { lval.tok = yylex.Text(); return f(I8)}
/i16/                     { lval.tok = yylex.Text(); return f(I16)}
/i32/                     { lval.tok = yylex.Text(); return f(I32)}
/i64/                     { lval.tok = yylex.Text(); return f(I64)}
/if/                      { return f(IF)}
/new/                     { return f(NEW)}
/return/                  { return f(RETURN)}
/str/                     { return f(STR)}
/struct/                  { return f(STRUCT)}
/switch/                  { return f(SWITCH)}
/type/                    { return f(TYPE)}
/ui8/                     { lval.tok = yylex.Text(); return f(UI8)}
/ui16/                    { lval.tok = yylex.Text(); return f(UI16)}
/ui32/                    { lval.tok = yylex.Text(); return f(UI32)}
/ui64/                    { lval.tok = yylex.Text(); return f(UI64)}
/union/                   { return f(UNION)      }
/#/                       { return f(INFER)      }
/&/                       { lval.tok = yylex.Text(); return f(REF_OP) }
/\+/                      { lval.tok = yylex.Text(); return f(ADD_OP) }
/-/                       { lval.tok = yylex.Text(); return f(SUB_OP) }
/\*/                      { lval.tok = yylex.Text(); return f(MUL_OP) }
/\//                      { lval.tok = yylex.Text(); return f(DIV_OP) }
/%/                       { lval.tok = yylex.Text(); return f(MOD_OP) }
/>/                       { lval.tok = yylex.Text(); return f(GT_OP) }
/</                       { lval.tok = yylex.Text(); return f(LT_OP) }
/>=/                      { lval.tok = yylex.Text(); return f(GTEQ_OP) }
/<=/                      { lval.tok = yylex.Text(); return f(LTEQ_OP) }
/>>=/                     { lval.tok = yylex.Text(); return f(RIGHT_ASSIGN)}
/<<=/                     { lval.tok = yylex.Text(); return f(LEFT_ASSIGN)}
/\+=/                     { lval.tok = yylex.Text(); return f(ADD_ASSIGN)}
/-=/                      { lval.tok = yylex.Text(); return f(SUB_ASSIGN)}
/\*=/                     { lval.tok = yylex.Text(); return f(MUL_ASSIGN)}
/\/=/                     { lval.tok = yylex.Text(); return f(DIV_ASSIGN)}
/%=/                      { lval.tok = yylex.Text(); return f(MOD_ASSIGN)}
/&=/                      { lval.tok = yylex.Text(); return f(AND_ASSIGN)}
/\^=/                     { lval.tok = yylex.Text(); return f(XOR_ASSIGN)}
/\|=/                     { lval.tok = yylex.Text(); return f(OR_ASSIGN)}
/>>/                      { return f(RIGHT_OP)}
/<</                      { return f(LEFT_OP)}
/\+\+/                    { return f(INC_OP)}
/--/                      { return f(DEC_OP)}
/&&/                      { return f(AND_OP)}
/\|\|/                    { return f(OR_OP)}
/<=/                      { return f(LE_OP)}
/>=/                      { return f(GE_OP)}
/==/                      { return f(EQ_OP)}
/\|/                      { return f(BITOR_OP)}
/&\^/                     { return f(BITCLEAR_OP)}
/\^/                      { return f(BITXOR_OP)}
/!=/                      { return f(NE_OP)}
/;/                       { return f(SEMICOLON) }
/:/                       { return f(COLON) }
/!/                       { lval.tok = yylex.Text(); return f(NEG_OP) }
/\[/                      { return f(LBRACK) }
/\]/                      { return f(RBRACK) }
/\(/                      { return f(LPAREN) }
/\)/                      { return f(RPAREN) }
/\{/                      { return f(LBRACE) }
/\}/                      { return f(RBRACE) }
/\./                      { return f(PERIOD) }
/,/                       { return f(COMMA) }
/=/                       { lval.tok = yylex.Text(); return f(ASSIGN) }
/:=/                      { lval.tok = yylex.Text(); return f(CASSIGN) }
/(:dl)|(:dLocals)/        { return f(DSTATE)     }
/(:ds)|(:dStack)/         { return f(DSTACK)     }
/(:dProgram)|(:dp)/       { return f(DPROGRAM)   }
/:package/                { return f(SPACKAGE)   }
/:struct/                 { return f(SSTRUCT)    }
/:func/                   { return f(SFUNC)      }
/:rem/                    { return f(REM)        }
/:step/                   { return f(STEP)       }
/:tStep/                  { return f(TSTEP)      }
/:tstep/                  { return f(TSTEP)      }
/:pStep/                  { return f(PSTEP)      }
/:aff/                    { return f(CAFF)       }
/package/                 { return f(PACKAGE)    }
/type/                    { return f(TYPSTRUCT)  }
/struct/                  { return f(STRUCT)     }
/return/                  { return f(RETURN)     }
/goto/                    { return f(GOTO)       }
/if/                      { return f(IF)         }
/for/                     { return f(FOR)        }
/func/                    { return f(FUNC)       }
/clauses/                 { return f(CLAUSES)    }
/def/                     { return f(DEF)        }
/field/                   { return f(FIELD)      }
/input/                   { return f(INPUT)      }
/output/                  { return f(OUTPUT)     }
/import/                  { return f(IMPORT)     }
/var/                     { return f(VAR)        }
/"([^"]*)"/ { /* " */
	str, err := strconv.Unquote(yylex.Text())
	if err != nil {
		panic(err)
	}
	tokVal := str
	tokVal = strings.TrimPrefix(tokVal, "\"")
	tokVal = strings.TrimSuffix(tokVal, "\"")
	lval.tok = tokVal

	noLines := countNewLines([]byte(lval.tok))
	lval.line += noLines
	LineNo += noLines
	
	return f(STRING_LITERAL)
}
/\`([^\`]*)\`/ { /* ` */
	tokVal := yylex.Text()
	tokVal = strings.TrimPrefix(tokVal, "`")
	tokVal = strings.TrimSuffix(tokVal, "`")
	lval.tok = tokVal
	lval.line = lval.line + countNewLines([]byte(lval.tok))
	return f(STRING_LITERAL)
}
/true/ {
	lval.bool = true
	return f(BOOLEAN_LITERAL)
}
/false/ {
	lval.bool = false
	return f(BOOLEAN_LITERAL)
}
/-?[0-9]+B/ {
	result ,_ := strconv.ParseInt(yylex.Text()[:len(yylex.Text()) - 1], 10, 32)
	lval.byt = byte(result)
	return f(BYTE_LITERAL)
}
/-?[0-9]+L/ {
	result ,_ := strconv.ParseInt(yylex.Text()[:len(yylex.Text()) - 1], 10, 64)
	lval.i64 = int64(result)
	return f(LONG_LITERAL)
}
/-?[0-9]+\.[0-9]*D/ {
	result ,_ := strconv.ParseFloat(yylex.Text()[:len(yylex.Text()) - 1], 64)
	lval.f64 = float64(result)
	return f(DOUBLE_LITERAL)
}
/-?[0-9]+/ {
	result ,_ := strconv.Atoi(yylex.Text())
	lval.i32 = int32(result)
	return f(INT_LITERAL)
}
/-?[0-9]+\.[0-9]*/ {
	result ,_ := strconv.ParseFloat(yylex.Text(), 32)
	lval.f32 = float32(result)
	return f(FLOAT_LITERAL)
}
/[_a-zA-Z][_a-zA-Z0-9]*/ {
	lval.tok = yylex.Text()
	return f(IDENTIFIER)
}
>      {
}
//
package main
import (
	"os"
	"os/user"
	"os/exec"
	"fmt"
	"bytes"
	"time"
	"io/ioutil"
	"strconv"
	"encoding/json"

	"regexp"
	
	"flag"

	"path/filepath"

	"net"
	"net/http"
	
	"runtime"
	//"runtime/debug"

	//"github.com/skycoin/viscript/signal"
	
	// "github.com/skycoin/skycoin/src/cipher/encoder"
	. "github.com/skycoin/cx/cx"
	. "github.com/skycoin/cx/cxgo/actions"
	"github.com/skycoin/cx/cxgo/cxgo0"
	// "github.com/skycoin/cx/src/interpreted"
)

const VERSION = "0.5.18"

var insert bool
// var PRGRM *CXProgram

func f (token int) int {
	if insert && token == NEWLINE {
		insert = false
		return SEMICOLON
	} else {
		switch token {
			case IDENTIFIER,
			
			BOOL, BYTE, STR,
			I8, I16, I32, I64,
			UI8, UI16, UI32, UI64,
			F32, F64, AFF,
			
			BOOLEAN_LITERAL, BYTE_LITERAL, STRING_LITERAL,
			INT_LITERAL, FLOAT_LITERAL, DOUBLE_LITERAL, LONG_LITERAL,
			RETURN, BREAK, CONTINUE,
			INC_OP, DEC_OP,
			
			RPAREN, RBRACE, RBRACK:
			insert = true
		default: insert = false
		}
		return token
	}
}

func countNewLines (s []byte) int {
	count := 0
	for i := 0; i < len(s); i++ {
		// if s[i] == '\r' && len(s) > i && s[i + 1] == '\n' {
		// 	count++
		// 	i++
		// 	continue
		// }
		if s[i] == '\n' {
			count++
			continue
		}
	}
	return count
}

func readline (fi *bufio.Reader) (string, bool) {
	s, err := fi.ReadString('\n')

	s = strings.Replace(s, "\n", "", -1)
	s = strings.Replace(s, "\r", "", -1)

	for _, ch := range s {
		if ch == rune(4) {
			err = io.EOF
			break
		}
	}

	if err != nil {
		return "", false
	}
	
	return s, true
}

func unsafeEval (code string) (out string) {
	var lexer *Lexer
	defer func() {
		if r := recover(); r != nil {
			out = fmt.Sprintf("%v", r)
			lexer.Stop()
		}  
	}()
	
	// storing strings sent to standard output
	old := os.Stdout
	r, w, _ := os.Pipe()
	os.Stdout = w
	
	LineNo = 0

	PRGRM = MakeProgram()
	cxgo0.PRGRM0 = PRGRM

	cxgo0.Parse(code)

	PRGRM = cxgo0.PRGRM0

	lexer = NewLexer(bytes.NewBufferString(code))
	yyParse(lexer)

	addInitFunction(PRGRM)

	if err := PRGRM.RunCompiled(0, nil); err != nil {
		PRGRM = MakeProgram()
		return fmt.Sprintf("%s", err)
	}

	outC := make(chan string)
	go func() {
		var buf bytes.Buffer
		io.Copy(&buf, r)
		outC <- buf.String()
	}()
	
	w.Close()
	os.Stdout = old // restoring the real stdout
	out = <-outC

	PRGRM = MakeProgram()
	return out
}

func Eval (code string) string {
	runtime.GOMAXPROCS(2)
	ch := make(chan string, 1)

	var result string
	
	go func() {
		result = unsafeEval(code)
		ch <- result
	}()

	timer := time.NewTimer(20 * time.Second)
	defer timer.Stop()

	select {
	case <-ch:
		return result
	case <-timer.C:
		PRGRM = MakeProgram()
		return "Timed out."
	}
}

type SourceCode struct {
	Code string
}

func ServiceMode () {
	host := ":5336"

	mux := http.NewServeMux()
	
	mux.Handle("/", http.FileServer(http.Dir("./dist")))
	mux.HandleFunc("/eval", func(w http.ResponseWriter, r *http.Request) {
		defer r.Body.Close()
		var b []byte
		var err error
		if b, err = ioutil.ReadAll(r.Body); err != nil {
			http.Error(w, err.Error(), 500)
			return
		}
		
		var source SourceCode
		if err := json.Unmarshal(b, &source); err != nil {
			http.Error(w, err.Error(), 500)
			return
		}

		if err := r.ParseForm(); err == nil {
			fmt.Fprintf(w, "%s", Eval(source.Code + "\n"))
		}
	})

	if listener, err := net.Listen("tcp", host); err == nil {
		fmt.Println("Starting CX web service on http://127.0.0.1:5336/")
		http.Serve(listener, mux)
	}
}

func IdeServiceMode() {
	// Leaps's host address
	ideHost := "localhost:5335"

	// Working directory for ide
	sharedPath := fmt.Sprintf("%s/src/github.com/skycoin/cx", os.Getenv("GOPATH"))

	// Start Leaps
	// cmd = `leaps -address localhost:5335 $GOPATH/src/skycoin/cx`
	cmnd := exec.Command("leaps", "-address", ideHost, sharedPath)

	// Just leave start command
	cmnd.Start()
}

func PersistantServiceMode() {
	fmt.Println("Start persistant for service mode!")

	fi := bufio.NewReader(os.Stdin)

	for {
		var inp string
		var ok bool
		
		printPrompt()

		if inp, ok = readline(fi); ok {
			if isJSON(inp) {
				var err error
				client := &http.Client{}
                body := bytes.NewBufferString(inp)
				req, err := http.NewRequest("GET", "http://127.0.0.1:5336/eval", body)
				if err != nil {
					fmt.Println(err)
					return
				}

				if resp, err := client.Do(req); err != nil {
					fmt.Println(err)
				} else {
					fmt.Println(resp.Status)
				}
			}
		}
	}
}

func (yylex Lexer) Error (e string) {
	// if InREPL {
	// 	fmt.Printf("syntax error: %s\n", e)
	// } else {
	// 	fmt.Printf("%s:%d: syntax error: %s\n", currentFileName, yylex.Line() + 1, e)
	// }
	
	yylex.Stop()
}

func getWorkingDirectory (file string) string {
	file = filepath.FromSlash(file)
	var c int = len(file) - 1
	for ; c > 0; c-- {
		if file[c - 1] == os.PathSeparator {
			break
		}
	}
	
	return file[:c]
}

func printPrompt () {
	if ReplTargetMod != "" {
		fmt.Println(fmt.Sprintf(":package %s ...", ReplTargetMod))
		fmt.Printf("* ")
	} else if ReplTargetFn != "" {
		fmt.Println(fmt.Sprintf(":func %s {...", ReplTargetFn))
		fmt.Printf("\t* ")
	} else if ReplTargetStrct != "" {
		fmt.Println(fmt.Sprintf(":struct %s {...", ReplTargetStrct))
		fmt.Printf("\t* ")
	} else {
		fmt.Printf("* ")
	}
}

func repl () {
	fmt.Println("CX", VERSION)
	fmt.Println("More information about CX is available at http://cx.skycoin.net/ and https://github.com/skycoin/cx/")

	InREPL = true

	// fi := bufio.NewReader(os.NewFile(0, "stdin"))
	fi := bufio.NewReader(os.Stdin)
	// scanner := bufio.NewScanner(os.Stdin)

	for {
		var inp string
		var ok bool

		printPrompt()
		
		if inp, ok = readline(fi); ok {
			if ReplTargetFn != "" {
				inp = fmt.Sprintf(":func %s {\n%s\n}\n", ReplTargetFn, inp)
			}
			if ReplTargetMod != "" {
				inp = fmt.Sprintf("%s", inp)
			}
			if ReplTargetStrct != "" {
				inp = fmt.Sprintf(":struct %s {\n%s\n}\n", ReplTargetStrct, inp)
			}

			b := bytes.NewBufferString(inp)

			yyParse(NewLexer(b))
		} else {
			if ReplTargetFn != "" {
				ReplTargetFn = ""
				continue
			}

			if ReplTargetStrct != "" {
				ReplTargetStrct = ""
				continue
			}

			if ReplTargetMod != "" {
				ReplTargetMod = ""
				continue
			}

			fmt.Printf("\nBye!\n")
			break
		}
	}
}

func initNewProject () {
	var name string
	
	reader := bufio.NewReader(os.Stdin)
	fmt.Print("Name of the project: ")
	name, _ = reader.ReadString('\n')

	fmt.Printf("Creating project %s%s/", SRCPATH, name)

	os.MkdirAll(fmt.Sprintf("%s%s", SRCPATH, name[:len(name) - 1]), 0751)
}

func checkCXPathSet () {
	if os.Getenv("CXPATH") == "" {
		usr, err := user.Current()
		if err != nil { 
			panic(err)
		}

		CXPATH = usr.HomeDir + "/cx/"
		BINPATH = CXPATH + "bin/"
		PKGPATH = CXPATH + "pkg/"
		SRCPATH = CXPATH + "src/"
	}

	ex, err := os.Executable()
	if err != nil {
		panic(err)
	}

	COREPATH = filepath.Dir(ex)
}

func addInitFunction (PRGRM *CXProgram) {
	if main, err := PRGRM.GetPackage(MAIN_PKG); err == nil {
		initFn := MakeFunction(SYS_INIT_FUNC)
		main.AddFunction(initFn)

		FunctionDeclaration(initFn, nil, nil, SysInitExprs)
		PRGRM.SelectFunction(MAIN_FUNC)
	} else {
		panic(err)
}
}

func isJSON(str string) bool {
	var js map[string]interface{}
	err := json.Unmarshal([]byte(str), &js)
	return err == nil
}

func main () {
	checkCXPathSet()

	runtime.LockOSThread()
	runtime.GOMAXPROCS(2)

  options := defaultCmdFlags()
	compileOutput := "o"

  registerFlags(&options)
  flag.Parse()

  if options.printHelp {
    printHelp()
    return
  }
  if options.printVersion {
    printVersion()
    return
  }
  if options.newProject {
    initNewProject()
    return
  }
  if options.compileMode {
    options.baseOutput = true
  }

  cxArgs, sourceCode, fileNames := parseArgsForCX(flag.Args())

	PRGRM = MakeProgram()

	if options.webMode {
		ServiceMode()
		return
	}

	if options.ideMode {
		IdeServiceMode()
		ServiceMode()
		return
	}

	if options.webPersistantMode {
		go ServiceMode()
		PersistantServiceMode()
		return
	}

	if options.compileMode && options.replMode {
		fmt.Println("Error: Options --compile and --repl are mutually exclusive.")
		return
	}

	if options.tokenizeMode {
		var r *os.File
		var w *os.File
		var err error

		if len(fileNames) == 0 {
			r = os.Stdin
		} else {
			sourceFilename := fileNames[0]
			if len(fileNames) > 1 {
				fmt.Fprintln(os.Stderr, "Multiple source files detected. Ignoring all except", sourceFilename)
			}
			r, err = os.Open(sourceFilename)
			if err != nil {
				fmt.Fprintln(os.Stderr, "Error reading:", sourceFilename, err)
				return
			}
			defer r.Close()
		}

		if options.compileOutput == "" {
			w = os.Stdout
		} else {
			tokenFilename := options.compileOutput
			w, err = os. Create(tokenFilename)
			if err != nil {
				fmt.Fprintln(os.Stderr, "Error writing:", tokenFilename, err)
				return
			}
			defer w.Close()
		}

		tokenize(r, w)
		return
	}

	cxgo0.PRGRM0 = PRGRM

	// setting project's working directory
	if !options.replMode {
		cxgo0.PRGRM0.Path = getWorkingDirectory(sourceCode[0].Name())
	}

	sourceCodeCopy := make([]string, len(sourceCode))
	for i, source := range sourceCode {
		tmp := bytes.NewBuffer(nil)
		io.Copy(tmp, source)
		sourceCodeCopy[i] = string(tmp.Bytes())
	}

	var prePkg *CXPackage
	parseErrors := 0

	if len(sourceCode) > 0 {
		// we need to traverse the elements by hierarchy
		// first add all the packages and structs at the same time
		// then add globals, as these can be of a custom type (and it could be imported)
		// the signatures of functions and methods are added in the cxgo0.y pass

		// identifying all the packages and structs first

		reMultiCommentOpen := regexp.MustCompile(`/\*`)
		reMultiCommentClose := regexp.MustCompile(`\*/`)

		for _, source := range sourceCodeCopy {
			reader := strings.NewReader(source)
			scanner := bufio.NewScanner(reader)
			var commentedCode bool
			for scanner.Scan() {
				line := scanner.Bytes()

				rePkg := regexp.MustCompile("package")
				reStrct := regexp.MustCompile("type")

				reComment := regexp.MustCompile("//")
				commentLoc := reComment.FindIndex(line)

				multiCommentOpenLoc := reMultiCommentOpen.FindIndex(line)
				multiCommentCloseLoc := reMultiCommentClose.FindIndex(line)

				if commentedCode && multiCommentCloseLoc != nil {
					commentedCode = false
				}

				if commentedCode {
					continue
				}

				if multiCommentOpenLoc != nil && !commentedCode && multiCommentCloseLoc == nil {
					commentedCode = true
					continue
				}

				if loc := rePkg.FindIndex(line); loc != nil {
					if (commentLoc != nil && commentLoc[0] < loc[0]) ||
						(multiCommentOpenLoc != nil && multiCommentOpenLoc[0] < loc[0]) ||
						(multiCommentCloseLoc != nil && multiCommentCloseLoc[0] > loc[0]) {
						// then it's commented out
						continue
					}


					rePkgName := regexp.MustCompile("(^|[\\s])package\\s+([_a-zA-Z][_a-zA-Z0-9]+)")

					if match := rePkgName.FindStringSubmatch(string(line)); match != nil {
						if pkg, err := cxgo0.PRGRM0.GetPackage(match[len(match) - 1]); err != nil {
							// then it hasn't been added
							newPkg := MakePackage(match[len(match) - 1])
							cxgo0.PRGRM0.AddPackage(newPkg)
							prePkg = newPkg
						} else {
							prePkg = pkg
						}
					}
				}
				if loc := reStrct.FindIndex(line); loc != nil {
					if (commentLoc != nil && commentLoc[0] < loc[0]) ||
						(multiCommentOpenLoc != nil && multiCommentOpenLoc[0] < loc[0]) ||
						(multiCommentCloseLoc != nil && multiCommentCloseLoc[0] > loc[0]) {
						// then it's commented out
						continue
					}

					reStrctName := regexp.MustCompile("(^|[\\s])type\\s+([_a-zA-Z][_a-zA-Z0-9]+)?\\s")

					if match := reStrctName.FindStringSubmatch(string(line)); match != nil {
						if _, err := cxgo0.PRGRM0.GetStruct(match[len(match) - 1], prePkg.Name); err != nil {
							// then it hasn't been added
							strct := MakeStruct(match[len(match) - 1])
							prePkg.AddStruct(strct)
						}
					}
				}
			}
		}

		// then we add globals. we also identify packages again,
		// so we know to what package we're going to add the struct declaration to
		for _, source := range sourceCodeCopy {
			scanner := bufio.NewScanner(strings.NewReader(source))
			// inBlock needs to be 0 to guarantee that we're in the global scope
			var inBlock int

			var commentedCode bool

			for scanner.Scan() {
				line := scanner.Bytes()

				rePkg := regexp.MustCompile("package")
				reGlbl := regexp.MustCompile("var")

				// we need to ignore function bodies
				// it'll also ignore struct declaration's bodies, but this doesn't matter
				reBodyOpen := regexp.MustCompile("{")
				reBodyClose := regexp.MustCompile("}")

				reComment := regexp.MustCompile("//")
				commentLoc := reComment.FindIndex(line)

				multiCommentOpenLoc := reMultiCommentOpen.FindIndex(line)
				multiCommentCloseLoc := reMultiCommentClose.FindIndex(line)

				if commentedCode && multiCommentCloseLoc != nil {
					commentedCode = false
				}

				if commentedCode {
					continue
				}

				if multiCommentOpenLoc != nil && !commentedCode && multiCommentCloseLoc == nil {
					commentedCode = true
					// continue
				}

				// we search for packages at the same time, so we can know to what package to add the global
				if loc := rePkg.FindIndex(line); loc != nil {
					if (commentLoc != nil && commentLoc[0] < loc[0]) ||
						(multiCommentOpenLoc != nil && multiCommentOpenLoc[0] < loc[0]) ||
						(multiCommentCloseLoc != nil && multiCommentCloseLoc[0] > loc[0]) {
						// then it's commented out
						continue
					}

					rePkgName := regexp.MustCompile("(^|[\\s])package\\s+([_a-zA-Z][_a-zA-Z0-9]+)")

					if match := rePkgName.FindStringSubmatch(string(line)); match != nil {
						if pkg, err := cxgo0.PRGRM0.GetPackage(match[len(match) - 1]); err != nil {
							// then it hasn't been added
							prePkg = MakePackage(match[len(match) - 1])
							cxgo0.PRGRM0.AddPackage(prePkg)
						} else {
							prePkg = pkg
						}
					}
				}

				if locs := reBodyOpen.FindAllIndex(line, -1); locs != nil {
					for _, loc := range locs {
						if !(multiCommentCloseLoc != nil && multiCommentCloseLoc[0] > loc[0]) {
							// then it's outside of a */, e.g. `*/ }`
							if (commentLoc == nil && multiCommentOpenLoc == nil && multiCommentCloseLoc == nil) ||
								(commentLoc != nil && commentLoc[0] > loc[0]) ||
								(multiCommentOpenLoc != nil && multiCommentOpenLoc[0] > loc[0]) ||
								(multiCommentCloseLoc != nil && multiCommentCloseLoc[0] < loc[0]) {
								// then we have an uncommented opening bracket
								inBlock++
							}
						}
					}
				}

				if locs := reBodyClose.FindAllIndex(line, -1); locs != nil {
					for _, loc := range locs {
						if !(multiCommentCloseLoc != nil && multiCommentCloseLoc[0] > loc[0]) {
							if (commentLoc == nil && multiCommentOpenLoc == nil && multiCommentCloseLoc == nil) ||
								(commentLoc != nil && commentLoc[0] > loc[0]) ||
								(multiCommentOpenLoc != nil && multiCommentOpenLoc[0] > loc[0]) ||
								(multiCommentCloseLoc != nil && multiCommentCloseLoc[0] < loc[0]) {
								// then we have an uncommented closing bracket
								inBlock--
							}
						}
					}
				}

				// we could have this situation: {var local i32}
				// but we don't care about this, as the later passes will throw an error as it's invalid syntax

				if loc := rePkg.FindIndex(line); loc != nil {
					if (commentLoc != nil && commentLoc[0] < loc[0]) ||
						(multiCommentOpenLoc != nil && multiCommentOpenLoc[0] < loc[0]) ||
						(multiCommentCloseLoc != nil && multiCommentCloseLoc[0] > loc[0]) {
						// then it's commented out
						continue
					}

					rePkgName := regexp.MustCompile("(^|[\\s])package\\s+([_a-zA-Z][_a-zA-Z0-9]+)")


					if match := rePkgName.FindStringSubmatch(string(line)); match != nil {
						if pkg, err := cxgo0.PRGRM0.GetPackage(match[len(match) - 1]); err != nil {
							// it should be already present
							panic(err)
						} else {
							prePkg = pkg
						}
					}
				}

				// finally, if we read a "var" and we're in global scope, we add the global without any type
				// the type will be determined later on
				if loc := reGlbl.FindIndex(line); loc != nil {
					if (commentLoc != nil && commentLoc[0] < loc[0]) ||
						(multiCommentOpenLoc != nil && multiCommentOpenLoc[0] < loc[0]) ||
						(multiCommentCloseLoc != nil && multiCommentCloseLoc[0] > loc[0]) || inBlock != 0 {
						// then it's commented out or inside a block
						continue
					}

					reGlblName := regexp.MustCompile("(^|[\\s])var\\s([_a-zA-Z][_a-zA-Z0-9]+)")

					if match := reGlblName.FindStringSubmatch(string(line)); match != nil {
						if _, err := prePkg.GetGlobal(match[len(match) - 1]); err != nil {
							// then it hasn't been added
							arg := MakeArgument(match[len(match) - 1], "", 0)
							arg.Offset = -1
							arg.Package = prePkg
							prePkg.AddGlobal(arg)
						}
					}
				}
			}
		}

		// cxgo0.Parse(allSC)
		for i, source := range sourceCodeCopy {
			source = source + "\n"
			if len(fileNames) > 0 {
				cxgo0.CurrentFileName = fileNames[i]
			}
			parseErrors += cxgo0.Parse(source)
		}
	}

	PRGRM = cxgo0.PRGRM0
	if FoundCompileErrors || parseErrors > 0 {
		os.Exit(CX_COMPILATION_ERROR)
	}

	if osPkg, err := PRGRM.GetPackage(OS_PKG); err == nil {

		arg0 := MakeArgument(OS_ARGS, "", -1).AddType(TypeNames[TYPE_UNDEFINED])
		arg0.Package = osPkg

		arg1 := MakeArgument(OS_ARGS, "", -1).AddType(TypeNames[TYPE_STR])
		arg1 = DeclarationSpecifiers(arg1, 0, DECL_BASIC)
		arg1 = DeclarationSpecifiers(arg1, 0, DECL_SLICE)


		DeclareGlobalInPackage(osPkg, arg0, arg1, nil, false)
	}

	// parsing all source code files
	for i, source := range sourceCodeCopy {
		source = source + "\n"
		LineNo = 1
		b := bytes.NewBufferString(source)
		if len(fileNames) > 0 {
			CurrentFile = fileNames[i]
		}
		parseErrors += yyParse(NewLexer(b))
	}

	if FoundCompileErrors || parseErrors > 0 {
		os.Exit(CX_COMPILATION_ERROR)
	}

	if len(sourceCode) == 0 {
		mod := MakePackage(MAIN_PKG)
		PRGRM.AddPackage(mod)
		fn := MakeFunction(MAIN_FUNC)
		mod.AddFunction(fn)

		ReplTargetFn = MAIN_FUNC
	} else {
		if _, err := PRGRM.GetFunction(MAIN_FUNC, MAIN_PKG); err == nil {
			ReplTargetFn = MAIN_FUNC
		} else {
			// then it's a library, not an app
		}
	}

	// adding *init function that initializes all the global variables
	addInitFunction(PRGRM)
	
	LineNo = 0

	if FoundCompileErrors {
		os.Exit(CX_COMPILATION_ERROR)
	}

	if ReplMode || len(sourceCode) == 0 {
		repl()
	} else if !CompileMode && !BaseOutput && len(sourceCode) > 0 {
		if InterpretMode {
			if err := PRGRM.RunCompiled(0, cxArgs); err != nil {
				fmt.Println(err)
				repl()
			}
		} else {
			if err := PRGRM.RunCompiled(0, cxArgs); err != nil {
				panic(err)
				// repl()
			}
			if AssertFailed() {
				os.Exit(CX_ASSERT)
			}
		}
	}
	
	if BaseOutput {
		//PRGRM.Compile(true)
	}
	if CompileMode {
		baseFilename := fmt.Sprintf("%s.go", compileOutput)
		build := exec.Command("go", "build", baseFilename)
		build.Run()
		removeBase := exec.Command("rm", baseFilename)
		removeBase.Run()
	}
}
